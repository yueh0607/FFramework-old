
/*******************************************************
 * Code Generated By FFramework
 * DateTime : 2024/2/7 14:05:04
 * UVersion : 2021.3.29f1
 *******************************************************/
using FFramework.MVVM;
using FFramework.RefCache;
using System;
using UnityEngine;

namespace FFramework.MVVM.RefCache
{
    public class PlayerVM : ViewModel<FFramework.MVVM.RefCache.Player>, IUpdate
    {

        CharacterConfigItem config;

        public async override FTask OnLoad()
        {
            TView.InitRefs();

            var model = MVVM.MV.GetModel<CharacterConfigModel>();
            config = model.Data[0];

            //(初始头角度以摄象机为准)
            currentRotationY = TView.Camera_Camera.transform.localEulerAngles.x;
            TView.Head_Transform.localEulerAngles = TView.Head_Transform.localEulerAngles
                .SetX(TView.Camera_Camera.transform.localEulerAngles.x);



            //启动Update
            this.EnableUpdate();


#if UNITY_EDITOR
            UnityGlobal.MainThread.GizmosUpdateThread.FrameCall += (x) =>
            {
                Gizmos.color = Color.gray;
                Gizmos.DrawCube(TView.transform.position + config.groundCheckOffset, config.groundCheckBox);

            };
#endif

            await FTask.CompletedTask;
        }


        public async override FTask OnUnload()
        {
            //关闭Update
            this.DisableUpdate();
            await FTask.CompletedTask;
        }

        //当前角色头的Y旋转角度
        float currentRotationY;
        bool isOnGround = false;

        void IUpdate.Update(float deltaTime)
        {
            //********************************旋转*************************
            float mouseX = Input.GetAxis("Mouse X");
            float mouseY = Input.GetAxis("Mouse Y");

            currentRotationY -= mouseY * config.rotationSensitivityX;
            currentRotationY = Math.Clamp(currentRotationY, -config.maxPitchDown, config.maxPitchUp);
            //Debug.Log(currentRotationY); 

            //横向旋转角色
            TView.transform.Rotate(new Vector3(0, mouseX * config.rotationSensitivityX, 0));
            //纵向旋转头和相机
            TView.Head_Transform.localEulerAngles = currentRotationY * Vector3.right;
            TView.Camera_Camera.transform.localEulerAngles = TView.Head_Transform.localEulerAngles;


            //******************************************移动********************

            float moveX = Input.GetAxis("Horizontal");
            float moveZ = Input.GetAxis("Vertical");

            Vector3 move = TView.transform.right * moveX + TView.transform.forward * moveZ;
            move *= config.moveSpeed;
            TView.transform.position += move * deltaTime;


            //*****************************************跳跃**********************

            DoGroundCheck();
            if (Input.GetKeyDown(KeyCode.Space) && isOnGround)
            {
                TView.Player_Rigidbody.AddForce(Vector3.up * config.jumpForce * 5, ForceMode.VelocityChange);
            }
        }

        /// <summary>
        /// 进行地面检查
        /// </summary>
        void DoGroundCheck()
        {

            if (Physics.BoxCast(
                TView.transform.position + config.groundCheckOffset,
                config.groundCheckBox / 2, Vector3.down, out var hitInfo,
                TView.transform.rotation, 10, 1 << LayerMask.NameToLayer("Default"),
                QueryTriggerInteraction.Ignore
                ))
            {
                Debug.Log($"在地面={hitInfo.collider?.gameObject?.name}");
                isOnGround = true;
            }
            else
            {
                Debug.Log("不在地面");
                isOnGround = false;
            }
        }
    }
}

