
/*******************************************************
 * Code Generated By FFramework
 * DateTime : 2024/3/5 18:43:51
 * UVersion : 2021.3.29f1
 *******************************************************/
using FFramework;
using FFramework.MVVM;
using FFramework.RefCache;
using System.Reflection;
using UnityEngine;

namespace FFramework.MVVM.RefCache
{

    public class MissileVM : FFramework.MVVM.ViewModel<FFramework.MVVM.RefCache.Missile>,IUpdate
    {
        EnemyVM enemy;
        FTaskToken token;
        public override async FTask OnLoad()
        {
            TView.InitRefs();
            Game.GameCon.GameState.missiles.Add(this);
            //随机选一个敌人作为必杀目标
            enemy = Game.GameCon.GameState.GetRandomEnemy();
            if (enemy == null) WaitEnmey().Forget();
            //遗忘发射任务
            token = DelaySendTask().Token;

            await FTask.CompletedTask;
        }
        async FTask WaitEnmey()
        {
            while (enemy == null)
            {
                await FTask.Delay(1);
                enemy = Game.GameCon.GameState.GetRandomEnemy();
            }
            token = null;

        }
        async FTask DelaySendTask()
        {
            await FTask.Delay(2);
            this.EnableUpdate();
        }

        public override async FTask OnUnload()
        {
            token?.Cancel();
            this.DisableUpdate();
            await FTask.CompletedTask;
        }


        public async FTask Kill()
        {
            this.DisableUpdate();
            Game.GameCon.GameState.missiles.Remove(this);
            await MV.Unload(this);
        }

        void IUpdate.Update(float deltaTime)
        {
            if (enemy == null || enemy.TView == null|| TView==null) return;
            var cfg = MV.GetModel<GameCfgModel>().Data[0];
            //追击方向
            Vector3 moveDir = enemy.TView.transform.position - TView.transform.position;
            //锁定朝向敌人
            TView.transform.rotation = Quaternion.Lerp(
                TView.Missile_Rigidbody.rotation,
                Quaternion.LookRotation(moveDir.normalized, enemy.TView.transform.position),
                cfg.missileRotSpeed * Time.deltaTime);
            //追击敌人
            TView.Missile_Rigidbody.velocity = TView.transform.forward * cfg.missileMoveMaxSpeed;
        }
    }
}

